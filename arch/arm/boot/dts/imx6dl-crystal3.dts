/*
 * Device Tree file for vitro Crystal 2 board
 * Copyright (C) 2017 Maciej Pijanowski <maciej.pijanowski@3mdeb.com>
 *
 * This file is dual-licensed: you can use it either under the terms
 * of the GPL or the X11 license, at your option. Note that this dual
 * licensing only applies to this file, and not this project as a
 * whole.
 *
 *  a) This file is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU General Public License as
 *     published by the Free Software Foundation; either version 2 of the
 *     License.
 *
 *     This file is distributed in the hope that it will be useful
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 * Or, alternatively
 *
 *  b) Permission is hereby granted, free of charge, to any person
 *     obtaining a copy of this software and associated documentation
 *     files (the "Software"), to deal in the Software without
 *     restriction, including without limitation the rights to use
 *     copy, modify, merge, publish, distribute, sublicense, and/or
 *     sell copies of the Software, and to permit persons to whom the
 *     Software is furnished to do so, subject to the following
 *     conditions:
 *
 *     The above copyright notice and this permission notice shall be
 *     included in all copies or substantial portions of the Software.
 *
 *     THE SOFTWARE IS PROVIDED , WITHOUT WARRANTY OF ANY KIND
 *     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY
 *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *     OTHER DEALINGS IN THE SOFTWARE.
 */
/dts-v1/;

#include "imx6dl.dtsi"
#include "imx6dl-crystal.dtsi"

/ {
	model = "Vitro Crystal 3";
	compatible = "vitro,crystal3", "fsl,imx6dl";
};

/* SPI1 from RPI header */
&ecspi1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_crystal3_ecspi1>;
	cs-gpios = <
		&gpio5 17 GPIO_ACTIVE_LOW
		&gpio5 9  GPIO_ACTIVE_LOW
		>;
	status = "okay";

	spidev1_0: spi@0 {
		compatible = "spidev";
		reg = <0>;
		spi-max-frequency = <5000000>;
	};

	spidev1_1: spi@1 {
		compatible = "spidev";
		reg = <1>;
		spi-max-frequency = <5000000>;
	};
};

/* SPI2 from RPI header */
&ecspi3 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_crystal3_ecspi3>;
	cs-gpios = <
		&gpio4 24 GPIO_ACTIVE_LOW
		>;
	status = "okay";

	spidev0_0: spi@0 {
		compatible = "spidev";
		reg = <0>;
		spi-max-frequency = <5000000>;
	};
};

&i2c1 {
	pcf8523: rtc@68 {
		compatible = "nxp,pcf8523";
		reg = <0x68>;
	};

	sgtl5000: audio@0a {
		clocks = <&clks IMX6QDL_CLK_CKO>;
		compatible = "fsl,sgtl5000";
		#sound-dai-cells = <0>;
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_crystal3_sgtl5000>;
		reg = <0x0a>;
		VDDA-supply = <&reg_gen_3v3>;
		VDDD-supply = <&reg_vgen4_1v8>;
		VDDIO-supply = <&reg_gen_3v3>;
	};
};

&iomuxc {

	crystal3 {
		pinctrl_crystal3_ecspi1: crystal3-ecspi1 {
			fsl,pins = <
				MX6QDL_PAD_DISP0_DAT20__ECSPI1_SCLK 0x100b1
				MX6QDL_PAD_DISP0_DAT21__ECSPI1_MOSI 0x100b1
				MX6QDL_PAD_DISP0_DAT22__ECSPI1_MISO 0x100b1
				MX6QDL_PAD_DISP0_DAT23__GPIO5_IO17 0x000b1
				MX6QDL_PAD_DISP0_DAT15__GPIO5_IO09 0x000b1
			>;
		};

		pinctrl_crystal3_ecspi3: crystal3-ecspi3 {
			fsl,pins = <
				MX6QDL_PAD_DISP0_DAT0__ECSPI3_SCLK 0x100b1
				MX6QDL_PAD_DISP0_DAT1__ECSPI3_MOSI 0x100b1
				MX6QDL_PAD_DISP0_DAT2__ECSPI3_MISO 0x100b1
				MX6QDL_PAD_DISP0_DAT3__GPIO4_IO24 0x000b1
			>;
		};

		pinctrl_hog: hoggrp {
		fsl,pins = <
				/*
				 * 40 pin RPI header (J17) GPIO description.
				 *
				 * In case of GPIOs following convention is
				 * used:
				 *  PI_GPIO_NUMBER (LINUX_GPIO_NUMBER)
				 *
				 * The functions are as following:
				 *
				 *	pin1		pin2
				 *	3.3V		5V
				 *	HAT_SDA (I2C2)	5V
				 *	HAT_SCL (I2C2)	GND
				 *	GCLK1		UART3_TXD
				 *	GND		UART3_RXD
				 *	17 (60)		PWM_0
				 *	27 (61)		GND
				 *	22 (64)		23 (73)
				 *	3.3V		24 (72)
				 *	SPI1_MOSI	GND
				 *	SPI1_MISO	25 (65)
				 *	SPI1_SCLK	SPI1_CE_0_N
				 *	GND		SPI1_CE_1_N
				 *	ID_SDA		ID_SCL
				 *	GCLK0		GND
				 *	GCLK2		PWM_1
				 *	PWM2		GND
				 *	SPI2_MISO	16 (121)
				 *	SPI2_CE_0_N 	SPI2_MOSI
				 *	GND		SPI2_SCLK
				 *
				 * The GPIO numbers can be extracted using
				 * signal name from below.
				 * Example -
				 * MX6QDL_PAD_EIM_DA10__GPIO3_IO10 is
				 * GPIO(3,10) which is (3-1)*32+10 = gpio 74
				 *
				 * i.e. The mapping of GPIO(X,Y) to Linux gpio
				 * number is : gpio number = (X-1) * 32 + Y
				 *
				 */

				/* 0x130b1:
				 * hysteresis enabled, 100K pull down, medium
				 * speed (100MHz), 43_OHM Drive Strength,
				 * Fast Slew Rate
				 */

				/* PI_GPIO_27 */
				MX6QDL_PAD_EIM_EB1__GPIO2_IO29 0x130b1
				/* PI_GPIO_22 */
				MX6QDL_PAD_EIM_DA0__GPIO3_IO00 0x130b1
				/* PI_GPIO_23 */
				MX6QDL_PAD_EIM_DA9__GPIO3_IO09 0x130b1
				/* PI_GPIO_24 */
				MX6QDL_PAD_EIM_DA8__GPIO3_IO08 0x130b1
				/* PI_GPIO_25 */
				MX6QDL_PAD_EIM_DA1__GPIO3_IO01 0x130b1
				/* PI_GPIO_16 */
				MX6QDL_PAD_DISP0_DAT4__GPIO4_IO25 0x130b1

				/* PI_GCLK0 */
				MX6QDL_PAD_EIM_A23__GPIO6_IO06 0x000b0
				/* PI_GCLK2 */
				MX6QDL_PAD_EIM_A24__GPIO5_IO04 0x000b0

				/* Pull-up mPCIe GSM modem rst and wake lines */
				/*  mPCIe2 MC5728_WAKE_EN */
				MX6QDL_PAD_EIM_A19__GPIO2_IO19 0x1b0b1
				/*  mPCIe2 MC5728_EXT_RST_N */
				MX6QDL_PAD_EIM_A20__GPIO2_IO18 0x1b0b1

				/* PI_GPIO17 - pull up for external shutdown */
				MX6QDL_PAD_EIM_EB0__GPIO2_IO28 0x1b0b1
			>;
		};

		pinctrl_crystal3_pwm1: crystal3-pwm1 {
			fsl,pins = <
				MX6QDL_PAD_DISP0_DAT8__PWM1_OUT 0x1b0b1
			>;
		};

		pinctrl_crystal3_pwm3: crystal3-pwm3 {
			fsl,pins = <
				MX6QDL_PAD_SD4_DAT1__PWM3_OUT 0x1b0b1
			>;
		};

		pinctrl_crystal3_pwm4: crystal3-pwm4 {
			fsl,pins = <
				MX6QDL_PAD_SD4_DAT2__PWM4_OUT 0x1b0b1
			>;
		};

		pinctrl_crystal3_sgtl5000: crystal3-sgtl5000 {
			fsl,pins = <
				MX6QDL_PAD_DISP0_DAT19__AUD5_RXD	0x130b0
				MX6QDL_PAD_KEY_COL0__AUD5_TXC		0x130b0
				MX6QDL_PAD_KEY_ROW0__AUD5_TXD		0x110b0
				MX6QDL_PAD_KEY_COL1__AUD5_TXFS		0x130b0
				MX6QDL_PAD_GPIO_5__CCM_CLKO1		0x130b0
			>;
		};

		pinctrl_crystal3_uart2: crystal3-uart2 {
			fsl,pins = <
				MX6QDL_PAD_SD4_DAT7__UART2_TX_DATA	0x1b0b1
				MX6QDL_PAD_SD4_DAT4__UART2_RX_DATA	0x1b0b1
				/* only CTS line is connected, RTS is not */
				MX6QDL_PAD_SD4_DAT6__UART2_CTS_B	0x1b0b1
			>;
		};

		pinctrl_crystal3_uart3: crystal3-uart3 {
			fsl,pins = <
				MX6QDL_PAD_EIM_D24__UART3_TX_DATA	0x1b0b1
				MX6QDL_PAD_EIM_D25__UART3_RX_DATA	0x1b0b1
			>;
		};

		pinctrl_crystal3_uart4: crystal3-uart4 {
			fsl,pins = <
				MX6QDL_PAD_CSI0_DAT13__UART4_RX_DATA	0x1b0b1
				MX6QDL_PAD_CSI0_DAT12__UART4_TX_DATA	0x1b0b1
			>;
		};

		pinctrl_crystal3_usdhc3: crystal3-usdhc3 {
			fsl,pins = <
				MX6QDL_PAD_SD3_CMD__SD3_CMD	0x17059
				MX6QDL_PAD_SD3_CLK__SD3_CLK	0x10059
				MX6QDL_PAD_SD3_DAT0__SD3_DATA0	0x17059
				MX6QDL_PAD_SD3_DAT1__SD3_DATA1	0x17059
				MX6QDL_PAD_SD3_DAT2__SD3_DATA2	0x17059
				MX6QDL_PAD_SD3_DAT3__SD3_DATA3	0x17059
				MX6QDL_PAD_SD3_DAT4__SD3_DATA4	0x17059
				MX6QDL_PAD_SD3_DAT5__SD3_DATA5	0x17059
				MX6QDL_PAD_SD3_DAT6__SD3_DATA6	0x17059
				MX6QDL_PAD_SD3_DAT7__SD3_DATA7	0x17059
				/* eMMC reset */
				MX6QDL_PAD_SD3_RST__SD3_RESET	0x17059
			>;
		};
	};
};

/* PI_PWM_0 */
&pwm1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_crystal3_pwm1>;
	status = "okay";
};

/* PI_PWM_1 */
&pwm3 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_crystal3_pwm3>;
	status = "okay";
};

/* PI_PWM_2 */
&pwm4 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_crystal3_pwm4>;
	status = "okay";
};

/* RS-485 */
&uart2 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_crystal3_uart2>;
	uart-has-rtscts;
	rs485-rts-delay = <1 1>;
	linux,rs485-enabled-at-boot-time;
	status = "okay";
};

/* PI_UART3 */
&uart3 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_crystal3_uart3>;
	status = "okay";
};

/* RS-232 */
&uart4 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_crystal3_uart4>;
	status = "okay";
};

/* eMMC */
/* Temporary disabled. It is a workaround for platform booting issue
   with Vitrobian based on Debian 10 (buster).
   Sometimes platform doesn't boot due to incorrect enumeration
   process execution and SD card with Vitrobian can't be detected properly. */
&usdhc3 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_crystal3_usdhc3>;
	bus-width = <8>;
	status = "okay";
};
